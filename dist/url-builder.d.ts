import { Scheme } from './enums/scheme.enum';
export declare class UrlBuilder {
    private scheme;
    private host;
    private port;
    private pathSegments;
    private params;
    private query;
    private fragment;
    static createFromUrl(baseUrl: string): UrlBuilder;
    static splitPath(path: string): string[];
    static trimPath(path: string): string;
    compareTo(url: UrlBuilder, relative?: boolean): boolean;
    getScheme(): Scheme;
    setScheme(scheme: Scheme): UrlBuilder;
    getHost(): string;
    setHost(host: string): UrlBuilder;
    getPort(): number;
    setPort(port: number): UrlBuilder;
    getPathSegments(): string[];
    setPathSegments(segments: string[], params?: Record<string, string | number>): UrlBuilder;
    addPath(path: string, params?: Record<string, string | number>): UrlBuilder;
    getParams(): Map<string, string | number>;
    setParams(params: Map<string, string | number>): UrlBuilder;
    addParam(key: string, value: string | number): UrlBuilder;
    addParams(params: Record<string, string | number>): UrlBuilder;
    getQuery(): Map<string, string | number>;
    setQuery(query: Map<string, string | number>): UrlBuilder;
    addQuery(key: string, value: string | number): UrlBuilder;
    addQueries(queries: Record<string, string | number>): UrlBuilder;
    getFragment(): string;
    setFragment(fragment: string): UrlBuilder;
    mergePathWith(url: UrlBuilder): UrlBuilder;
    getFirstPath(): string;
    getLastPath(): string;
    getParent(n?: number): UrlBuilder;
    getBetween2Words(a: string, b: string): string;
    getRelativePath(withQuery?: boolean, withFragment?: boolean): string;
    getQueryString(): string;
    toString(): string;
}
